package org.firstinspires.ftc.teamcode.utils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.opencv.core.*;
import org.opencv.features2d.SimpleBlobDetector;
import org.opencv.features2d.SimpleBlobDetector_Params;
import org.opencv.imgproc.*;

/**
* GripPipelines class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class BlobbingCustomTeamShippingElementPipeline {

	//Outputs
	private Mat cvCvtcolor0Output = new Mat();
	private Mat cvCvtcolor1Output = new Mat();
	private Mat cvThresholdOutput = new Mat();
	private MatOfKeyPoint findBlobsOutput = new MatOfKeyPoint();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public Mat process(Mat source0) {
		// Step CV_cvtColor0:
		Mat cvCvtcolor0Src = source0;
		int cvCvtcolor0Code = Imgproc.COLOR_RGB2BGR;
		cvCvtcolor(cvCvtcolor0Src, cvCvtcolor0Code, cvCvtcolor0Output);

		// Step CV_cvtColor1:
		Mat cvCvtcolor1Src = cvCvtcolor0Output;
		int cvCvtcolor1Code = Imgproc.COLOR_BGR2RGB;
		cvCvtcolor(cvCvtcolor1Src, cvCvtcolor1Code, cvCvtcolor1Output);

		// Step CV_Threshold0:
		Mat cvThresholdSrc = cvCvtcolor1Output;
		double cvThresholdThresh = 200.0;
		double cvThresholdMaxval = 10000.0;
		int cvThresholdType = Imgproc.THRESH_BINARY;
		cvThreshold(cvThresholdSrc, cvThresholdThresh, cvThresholdMaxval, cvThresholdType, cvThresholdOutput);

		// Step Find_Blobs0:
		Mat findBlobsInput = cvThresholdOutput;
		double findBlobsMinArea = 200.0;
		double[] findBlobsCircularity = {0.0, 0.9999999999999999};
		boolean findBlobsDarkBlobs = false;
		// findBlobs(findBlobsInput, findBlobsMinArea, findBlobsCircularity, findBlobsDarkBlobs, findBlobsOutput);
        return cvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_cvtColor.
	 * @return Mat output from CV_cvtColor.
	 */
	public Mat cvCvtcolor0Output() {
		return cvCvtcolor0Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_cvtColor.
	 * @return Mat output from CV_cvtColor.
	 */
	public Mat cvCvtcolor1Output() {
		return cvCvtcolor1Output;
	}

	/**
	 * This method is a generated getter for the output of a CV_Threshold.
	 * @return Mat output from CV_Threshold.
	 */
	public Mat cvThresholdOutput() {
		return cvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Blobs.
	 * @return MatOfKeyPoint output from Find_Blobs.
	 */
	public MatOfKeyPoint findBlobsOutput() {
		return findBlobsOutput;
	}


	/**
	 * Converts an image from one color space to another.
	 * @param src Image to convert.
	 * @param code conversion code.
	 * @param dst converted Image.
	 */
	private void cvCvtcolor(Mat src, int code, Mat dst) {
		Imgproc.cvtColor(src, dst, code);
	}

	/**
	 * Apply a fixed-level threshold to each array element in an image.
	 * @param src Image to threshold.
	 * @param threshold threshold value.
	 * @param maxVal Maximum value for THRES_BINARY and THRES_BINARY_INV
	 * @param type Type of threshold to appy.
	 * @param dst output Image.
	 */
	private void cvThreshold(Mat src, double threshold, double maxVal, int type,
		Mat dst) {
		Imgproc.threshold(src, dst, threshold, maxVal, type);
	}

	/**
	 * Detects groups of pixels in an image.
	 * @param input The image on which to perform the find blobs.
	 * @param minArea The minimum size of a blob that will be found
	 * @param circularity The minimum and maximum circularity of blobs that will be found
	 * @param darkBlobs The boolean that determines if light or dark blobs are found.
	 * @param blobList The output where the MatOfKeyPoint is stored.
	 */
	private void findBlobs(Mat input, double minArea, double[] circularity,
		Boolean darkBlobs, MatOfKeyPoint blobList) {
		SimpleBlobDetector_Params params = new SimpleBlobDetector_Params();

		// Setting the parameters for the blob detector
		params.set_thresholdStep(10);
		params.set_minThreshold(50);
		params.set_maxThreshold(220);
		params.set_minRepeatability(2);
		params.set_minDistBetweenBlobs(10);
		params.set_filterByColor(true);
		params.set_filterByArea(true);
		params.set_minArea((float) minArea);
		params.set_maxArea((float) (Integer.MAX_VALUE));
		params.set_filterByCircularity(true);
		params.set_minCircularity((float) circularity[0]);
		params.set_maxCircularity((float) circularity[1]);
		params.set_filterByInertia(true);
		params.set_minInertiaRatio((float) 0.1);
		params.set_maxInertiaRatio(Integer.MAX_VALUE);
		params.set_filterByConvexity(true);
		params.set_minConvexity((float) 0.95);
		params.set_maxConvexity((float) Integer.MAX_VALUE);

		SimpleBlobDetector blobDet = SimpleBlobDetector.create(params);
		blobDet.detect(input, blobList);
	}




}

